#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <string.h>
#include <net/if.h>
#include <sys/time.h>
#define PORT 53
//#define SERVADDR "fe80::5ce2:3aba:6384:f0ab/64" //主机IP
#define SERVADDR "2001:67c:27e4:15::6411"   //dns64 srv 500ms
//#define SERVADDR "2001:67c:27e4::64"   //dns64 srv 不通
//#define SERVADDR "2001:67c:27e4:15::64"   //dns64 srv 1500ms
//#define SERVADDR "2001:67c:27e4::46"   //dns64 srv 不通
//#define SERVADDR "2001:67c:27e4:641::5bef:6015"  //dns64 srv不通

#define MESSAGE "hi there"


#ifndef DNS_P_DICTSIZE
#define DNS_P_DICTSIZE	16
#endif
#if defined __GNUC__
#define DNS_PRAGMA_EXTENSION __extension__
#else
#define DNS_PRAGMA_EXTENSION
#endif

struct dns_header {
		unsigned qid:16;
#if (defined BYTE_ORDER && BYTE_ORDER == BIG_ENDIAN) || (defined __sun && defined _BIG_ENDIAN)
		unsigned qr:1;
		unsigned opcode:4;
		unsigned aa:1;
		unsigned tc:1;
		unsigned rd:1;

		unsigned ra:1;
		unsigned unused:3;
		unsigned rcode:4;
#else
		unsigned rd:1;
		unsigned tc:1;
		unsigned aa:1;
		unsigned opcode:4;
		unsigned qr:1;

		unsigned rcode:4;
		unsigned unused:3;
		unsigned ra:1;
#endif

		unsigned qdcount:16;
		unsigned ancount:16;
		unsigned nscount:16;
		unsigned arcount:16;
}; /* struct dns_header */

struct dns_packet {
	unsigned short dict[DNS_P_DICTSIZE];

	struct dns_p_memo {
		struct dns_s_memo {
			unsigned short base, end;
		} qd, an, ns, ar;

		struct {
			unsigned short p;
			unsigned short maxudp;
			unsigned ttl;
		} opt;
	} memo;

	struct { struct dns_packet *cqe_next, *cqe_prev; } cqe;

	size_t size, end;

	int:16; /* tcp padding */

	DNS_PRAGMA_EXTENSION union {
		struct dns_header header;
		unsigned char data[1];
	};
}; /* struct dns_packet */

int main(void)
{
    struct sockaddr_in6 v;
    struct sockaddr_in6 server_addr;
    int get_err;
    int sockfd;
    char buffer[65535];
    int srvlen = sizeof(server_addr);
    int i ;
    int ret;
    memset(&v, 0, sizeof(v));
    v.sin6_family = AF_INET6;
    v.sin6_port = htons(PORT);
    v.sin6_flowinfo = 0;
    printf("[%s] -- [%d] ++\r\n", __FUNCTION__, __LINE__);
    v.sin6_scope_id = if_nametoindex(SERVADDR);
    socklen_t len = sizeof(v);
    inet_pton(AF_INET6,SERVADDR,&v.sin6_addr.__in6_u);

    sockfd = socket(v.sin6_family, SOCK_DGRAM, 0);
    if(sockfd < 0)
    {
        perror("socket");
        return 1;
    }
    struct dns_packet query;
    memset(&query, 0, sizeof(struct dns_packet));

    query.memo.qd.base = 12;
    query.memo.qd.end = 31;
    query.memo.opt.p = 0;
    query.memo.opt.maxudp = 0;
    query.memo.opt.ttl = 0;
    query.size = 512;
    query.end = 31;
    query.header.rd = 1;
    query.header.tc = 0;
    query.header.aa = 0;
    query.header.opcode = 0;
    query.header.qr = 0;
    query.header.rcode = 0;
    query.header.unused = 0;
    query.header.ra = 0;
    query.header.qdcount = 0;
    query.header.ancount = 0;
    query.header.nscount = 0;
    query.header.arcount = 0;
    struct timeval start,end;
    gettimeofday(&start, NULL);

    if(sendto(sockfd, &query, sizeof(query), 0, (struct sockaddr *)&v, len) < 0)
    {
        perror("sento failed");
        exit(4);
    }
    memset(&server_addr, 0, sizeof(server_addr));
    ret = recvfrom(sockfd, buffer, 1024, 0,
                (struct sockaddr *)&server_addr,
                &srvlen) ;
    if(ret < 0) {
        printf("[%s] -- [%d] -- recvfrom failed\r\n", __FUNCTION__, __LINE__);
        return -1;
    }
    else {
        
        gettimeofday(&end, NULL);

        printf("dns time : %ld ms\r\n", (end.tv_sec - start.tv_sec) * 1000 + (end.tv_usec - start.tv_usec) / 1000);
        //printf("buffer : %s\r\n", buffer);
        printf("ret : %d\r\nbuffer : \r\n", ret);
        for(i = 0;i < ret;i ++) {
            printf("%02x", buffer[i]);
            if((i + 1) % 8 == 0) {
                printf("\r\n");
            }
        }
        printf("\r\n");
        printf("server_addr.sin6_port : %d\r\n", server_addr.sin6_port);
        printf("server_addr.sin6_addr.s6_addr : ");
        for(i = 0;i < 16;i ++) {
            printf("%02x", server_addr.sin6_addr.s6_addr[i]);
            if((i+1)%2 == 0) {
                printf(":");
            }
        }
        printf("\r\n");
        printf("server_addr.sin6_scope_id : %d\r\n", server_addr.sin6_scope_id);
    }

    close(sockfd);

    return 0;
}
