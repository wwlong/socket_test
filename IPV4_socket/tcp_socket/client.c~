/**********************************************************
 *   Author        :     wangwenlong
 *   Last modified :     2017-04-06 20:20
 *   Filename      :     client.c
 *   Description   :     
 * *******************************************************/

#include <stdio.h>
#include <sys/socket.h>
#include <sys/select.h>
#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>
#include <errno.h>
#include <netinet/in.h>
#include <string.h>
#include <arpa/inet.h>

#define PORT 8080
#define SRV_IP "192.168.3.215"
int main()
{
    int sock_fd;
    struct sockaddr_in server;
    sock_fd = socket(AF_INET, SOCK_STREAM, 0);
    if(socket < 0) {
        printf("[%s] -- [%d] -- socket create failed\r\n", __FUNCTION__, __LINE__);
        return -1;
    }

    server.sin_family = AF_INET;
    server.sin_addr.s_addr = inet_addr(SRV_IP);
    server.sin_port = htons(PORT);

    //connet to remote server
    if(connect(sock_fd, (struct sockaddr *)&server, sizeof(server)) < 0) {
        printf("[%s] -- [%d] -- connet to remote server failed\r\n", __FUNCTION__, __LINE__);
        return -1;
    }

    //使用select实现非阻塞socket
    int ret;
    int recv_len;
    char buffer[1024];
    int buffer_len = 1024;
    fd_set write_set,read_set;
    struct timeval timeout;
    char *send_str = "hello,I am client";
    while(1) {
        //read data from socket
#if 0
        FD_ZERO(&read_set);
        FD_SET(sock_fd , &read_set);
        timeout.tv_sec = 1;
        timeout.tv_usec = 0;
        ret = select(sock_fd + 1, &read_set, NULL, NULL, &timeout);
        if(ret < 0) {
            printf("[%s] -- [%d] -- select failed\r\n", __FUNCTION__, __LINE__);
            return -1;
        }
        else if(ret == 0) {
            printf("[%s] -- [%d] -- select timeout\r\n", __FUNCTION__, __LINE__);
        }
        else {
            printf("data from server is avaiable now\r\n");
            //开始recv from server
            while(1) {
                if(FD_ISSET(sock_fd, &read_set)) {
                    memset(buffer, 0, sizeof(buffer));
                    recv_len = recv(sock_fd, buffer, 3, 0);
                    if(-1 == recv_len && (EINTR == errno || EINPROGRESS == errno || EAGAIN == errno)) {
                        printf("data not recv all : %s\r\n",buffer);
                        memset(buffer, 0, sizeof(buffer));
                        continue;
                    }
                    else if(recv_len >= 1){
                        printf("recv data : %s\r\ndata_len : %d\r\n", buffer, recv_len);
                        memset(buffer, 0, sizeof(buffer));
                        if((EINTR == errno || EINPROGRESS == errno || EAGAIN == errno)) {
                            printf("(EINTR == errno || EINPROGRESS == errno || EAGAIN == errno)\r\n");
                        }
                        //perror("error\r\n");
                        break;
                    }
                    else {
                        printf("[%s] -- [%d] -- recv failed\r\n", __FUNCTION__, __LINE__);
                        break;
                    }
                }
            }
        }

#endif 
        //write data to socket
        FD_ZERO(&write_set);
        FD_SET(sock_fd, &write_set);
        timeout.tv_sec = 1;
        timeout.tv_usec = 0;
        ret = select(sock_fd + 1, NULL, &write_set, NULL, &timeout);
        if(ret < 0) {
            printf("[%s] -- [%d] -- select failed\r\n", __FUNCTION__, __LINE__);
            return -1;
        }
        else if(ret == 0) {
            printf("[%s] -- [%d] -- select timeout\r\n", __FUNCTION__, __LINE__);
        }
        else {
            printf("send data to server\r\n");
            //开始recv from server
            while(1) {
                if(FD_ISSET(sock_fd, &write_set)) {
                    recv_len = send(sock_fd, send_str, strlen(send_str), 0);
                    if(-1 == recv_len && (EINTR == errno || EINPROGRESS == errno || EAGAIN == errno)) {
                        continue;
                    }
                    else if(recv_len >= 1){
                        break;
                    }
                    else {
                        printf("[%s] -- [%d] -- send failed\r\n", __FUNCTION__, __LINE__);
                        break;
                    }
                }
            }
        }
    } 
}
